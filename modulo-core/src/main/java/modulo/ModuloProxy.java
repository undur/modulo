package modulo;

import java.util.UUID;
import java.util.function.Function;

import org.eclipse.jetty.http.HttpURI;
import org.eclipse.jetty.proxy.ProxyHandler;
import org.eclipse.jetty.server.Request;

/**
 * Subclass of Jetty's proxy handler, allows us to make required modifications to the proxied request before forwarding it to the instance
 */
class ModuloProxy extends ProxyHandler.Reverse {

	public ModuloProxy( Function<Request, HttpURI> httpURIRewriter ) {
		super( httpURIRewriter );
	}

	@Override
	protected void addProxyHeaders( Request clientToProxyRequest, org.eclipse.jetty.client.Request proxyToServerRequest ) {
		super.addProxyHeaders( clientToProxyRequest, proxyToServerRequest );
		proxyToServerRequest.headers( headers -> headers.add( "x-webobjects-adaptor-version", "Modulo" ) ); // mod_WebObjects sends "Apache" here. I have no idea if that's significant, let's assume not
		proxyToServerRequest.headers( headers -> headers.add( "x-webobjects-request-id", UUID.randomUUID().toString() ) ); // Our unique ID does not match the format of the id generated by mod_WebObjects. Doesn't seem to hurt (yet) though. We'll handle it if it turns out to be a problem
		proxyToServerRequest.headers( headers -> headers.add( "x-webobjects-request-method", clientToProxyRequest.getMethod() ) ); // Why mod_WebObjects sends the request method, already an explicit part of the request, as a header as well, I have no idea. But it can't hurt emulating it
	}
}